package client;

import java.rmi.server.UnicastRemoteObject;
import server.NimServerInterface;
import java.util.Scanner;
import constants.Constants; // Game Constants
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import player.PlayerInterface;

/**
 * NimClient provides client side functionality
 * @author Chris
 */
public class NimClient extends UnicastRemoteObject implements NimClientInterface, PlayerInterface {
    private NimServerInterface serverLobby;
    private String playerName; // Players playerName
    private int difficulty;    // Requested difficulty  
    private int opponentType;  // Chosen opponent type
    private String temp;       // Used to validate inputs
    private boolean inGame;    // In game flag
    private int playerCode;      // Player code used in lobby to ensure unique player


    /**
     * Constructor
     * @throws RemoteException 
     */
    public NimClient() throws RemoteException {

        getPlayerDetails(); // Get the players details: name, level and opponent type
        playerCode = -1;      // Rogue value indicating not set by server yet
                
        //player = new HumanPlayer(playerName, difficulty, opponentType); // Construct human player
        
        connectToServer(); // Connect to remote server and join lobby
    }
    
    /**
     * Gets the code for this player
     * @return player's unique code code
     */
    @Override
    public int getPlayerCode() throws RemoteException {
        return playerCode;
    }

    /**
     * Sets the player's unique code
     * @param playerCode Sets the players unique code as generated by server
     */
    @Override
    public void setPlayerCode(int playerCode) throws RemoteException {
        this.playerCode = playerCode;
    }
    
    /**
    * Gets the number of marbles the player wishes to take
    * @param bagSize The number of marbles in the bag
    * @return The number of marbles to take
    */
    @Override
    public int getMarbles(int bagSize) {
        Scanner input = new Scanner(System.in); // Assign input to system input stream
        int marbles = 0;
        
        // Prompt for number of marbles
        System.out.println(playerName + ", how many marbles do you wish to take (minimum = 1, maximum = " + (bagSize / 2) + ")?");
        
        do { // loop accepts and validates chosen difficulty 
            temp = input.nextLine(); // Input number of marbles 
            
            // Validate the number of marbles selected            
            try { // Convert the input to an integer
                marbles = Integer.parseInt(temp); // Validate input is numeric, this throws NumberFormatException
                
                // Check difficulty is in range
                if(marbles < 1 || marbles > bagSize / 2) {
                    marbles = 0;
                    throw new NumberFormatException(); // Throw error to invoke catch block
                }
            } catch(NumberFormatException e) { // Error in input
                System.out.println("Invalid input, please enter a value between: 1 and " + bagSize / 2);
            }
        } while(marbles == 0);
        
        // Valid choice made - return the result
        return marbles;
    }
    
    /**
     * Returns the playerName of the player
     * @return Player's name
     * @throws java.rmi.RemoteException
     */
    @Override
    public String getName() throws RemoteException {
        return playerName;
    }
    
    /**
     * Returns the game difficulty 
     * @throws java.rmi.RemoteException
     */
    @Override
    public int getDifficulty() throws RemoteException {
        return difficulty;
    }
    
    /** 
     * Returns the chosen opponent type
     * @return The type of opponent HUMAN or COMPUTER
     * @throws java.rmi.RemoteException
     */
    @Override
    public int getOpponentType() throws RemoteException {
        return opponentType;
    }
    
    /**
     * Returns player type
     * @return true = Human player
     * @throws java.rmi.RemoteException
     */
    @Override
    public boolean getIsHuman() throws RemoteException {
        return true; // The client is always human
    }
     
    /**
     * Sets the inGame status flag of player
     * @param inGameFlag True = in game, False = not in game
     * @throws java.rmi.RemoteException
     */
    @Override
    public void setInGameStatus(boolean inGameFlag) throws RemoteException {
        inGame = inGameFlag;
    }
    
    /**
     * Returns the in game status of the player
     * @return true = in game, false not in game
     * @throws java.rmi.RemoteException
     */
    @Override
    public boolean getInGameStatus() throws RemoteException {
        return inGame;
    }
    
    /**
     * Indicates to the player that they have won the game
     */
    @Override
    public void won() {
        System.out.println("You win!");
    }
    
    /**
     * Indicates to the player that they have lost
     */
    @Override
    public void lost() {
        System.out.println("You loose!");
    }
    
    /**
     * Ask the player if they would like to play again
     * If yes, the serverLobby is told to keep the player on .
     * If no, the serverLobby is told to remove the player
     * @return True = Yes, False = No
     */
    @Override
    public boolean playAgain() {
        Scanner input = new Scanner(System.in); // Assign input to system input stream;
        String choice;
        boolean validChoice;
        
        System.out.println("Would you like to play again?: Y or N (followed by Enter) ");
        
        do { // loop accepts and validates choice - will accept yYnN as valid
            validChoice = false;
            
            choice = input.nextLine();   // Get input from user
            choice = choice.toUpperCase(); // Convert entry to uppercase
            
            // Validate input
            if(!choice.equals("Y") && !choice.equals("N")) {
                System.out.println("Invalid input, play again? Y or N");
            }
            else
                validChoice = true;
        } while(!validChoice);
        
        if(choice.equals("N")) {
            System.out.println("Thank you for playing a Game of Nim");
        }
        else {
            System.out.println("Returning to lobby to await opponent");
            System.out.println("------------------------------------------------");
        }
        
        return choice.equals("Y"); // Return users choice as true/false
    }
    

    /**
     * Accept and validate client details
     */
    private void getPlayerDetails() {
        Scanner input = new Scanner(System.in); // Assign input to system input stream
        
        System.out.println("Welcome to a Game of Nim client");
        System.out.println("Before continuing, please enter your details when prompted below -");

        // Request players playerName
        do {
            System.out.println("Please enter your name (followed by enter): ");
            playerName = input.nextLine(); // Get playerName from input stream
        } while(playerName.length() == 0); // Simply check length of playerName is not 0
        
        difficulty = 0;
        
        // Accept and validate difficulty
        System.out.println("\nPlease choose a game difficulty: 1 = Easy, 2 = Hard (followed by enter): ");
        do { // loop accepts and validates chosen difficulty 
            temp = input.nextLine(); // Get chosen difficulty
            
            try { // Convert the input to an integer
                difficulty = Integer.parseInt(temp); // Validate input is numeric
                
                // Check difficulty is in range
                if(difficulty < Constants.DIFFICULTY_MIN || difficulty > Constants.DIFFICULTY_MAX) {
                    difficulty = 0;
                    throw new NumberFormatException(); // Throw error to invoke catch block
                }
            } catch(NumberFormatException e) { // Error in input
                System.out.println("Invalid input, enter a value between: " 
                    + Constants.DIFFICULTY_MIN + " and " + Constants.DIFFICULTY_MAX);
            }
        } while(difficulty == 0);
        
        // Accept opponent type
        System.out.println("\nPlease choose opponent type, 1 = Human, 2 = Computer");
        System.out.println("Note: If you choose human, you may have to wait for a human opponent of the same level to join the lobby:");
        do {
            System.out.println("Enter: 1 = Human, 2 = Computer");
            
            temp = input.nextLine(); // Get opponent type
            
            try { // Convert the input to an integer
                opponentType = Integer.parseInt(temp); // Validate input is numeric
                
                // Check opponent type is in range
                if(opponentType < 1 || opponentType > 2) {
                    opponentType = 0;
                    throw new NumberFormatException(); // Throw error to invoke catch block
                }
            } catch(NumberFormatException e) { // Error in input
                System.out.println("Invalid input, enter a value between: 1 and 2 ");
            }
            
        } while (opponentType == 0);
    }
        
    /**
     * Attempt to connect to the server and add player to server lobby
     */
    private void connectToServer() {
        String serverURL = "rmi://localhost/" + Constants.SERVERNAME; // Server URL
        
        try {
            serverLobby = (NimServerInterface) Naming.lookup(serverURL);
            serverLobby.addPlayer(this); // Join the server lobby
            
            // serverLobby.addPlayer(this); // Add player to the server queue 
        } catch(Exception e) {
            Logger.getLogger(NimClient.class.getName()).log(Level.SEVERE, null, e);
            System.out.println("Error connecting to server: " + e.getMessage());
        } 
    }
            
    /**
     * Displays message received from server
     * @param message Message from the server
     * @throws RemoteException
     */
    @Override
    public void serverMessage(String message) throws RemoteException {
        System.out.println(message);
    }
    
    /**
     * Simple joined server confirmation message
     * @throws java.rmi.RemoteException
     */
    @Override
    public void joinedServer() throws RemoteException {
        System.out.println("Joined the server");
    }
    
    /**
     * Constructs client
     * @param args
     * @throws RemoteException 
     */
    public static void main(String[] args) throws RemoteException {
        
        // Instantiate a new client game
        try {
            NimClient clientGame = new NimClient(); 
        } catch(Exception e) {
            System.out.println("Cannot connect to server");
            System.out.println(e.getCause());
        }
    }    
}
